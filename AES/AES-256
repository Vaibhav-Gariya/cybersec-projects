from cryptography.fernet import Fernet
import os

# 🔐 Generate and save encryption key
def generate_key():
    key = Fernet.generate_key()
    with open("secret.key", "wb") as key_file:
        key_file.write(key)
    print("✅ Key generated and saved to 'secret.key'")

# 🔑 Load existing key
def load_key():
    return open("secret.key", "rb").read()

# 🔒 Encrypt a file
def encrypt_file(filename, key):
    f = Fernet(key)
    with open(filename, "rb") as file:
        data = file.read()
    encrypted_data = f.encrypt(data)
    with open(filename + ".enc", "wb") as file:
        file.write(encrypted_data)
    print(f"✅ File encrypted: {filename}.enc")

# 🔓 Decrypt a file
def decrypt_file(filename, key):
    f = Fernet(key)
    with open(filename, "rb") as file:
        encrypted_data = file.read()
    try:
        decrypted_data = f.decrypt(encrypted_data)
        with open("decrypted_" + os.path.basename(filename).replace(".enc", ""), "wb") as file:
            file.write(decrypted_data)
        print("✅ File decrypted successfully.")
    except:
        print("❌ Decryption failed. Wrong key or corrupted file.")

# 🧭 Menu
def menu():
    while True:
        print("\n🔐 Advanced Encryption Tool")
        print("1. Generate Key")
        print("2. Encrypt File")
        print("3. Decrypt File")
        print("4. Exit")
        choice = input("Choose an option: ")

        if choice == "1":
            generate_key()
        elif choice == "2":
            key = load_key()
            file = input("Enter filename to encrypt: ")
            encrypt_file(file, key)
        elif choice == "3":
            key = load_key()
            file = input("Enter encrypted file (.enc): ")
            decrypt_file(file, key)
        elif choice == "4":
            break
        else:
            print("❌ Invalid choice.")

if __name__ == "__main__":
    menu()